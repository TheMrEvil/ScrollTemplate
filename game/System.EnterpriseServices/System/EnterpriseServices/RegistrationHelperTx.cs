using System;
using System.Runtime.InteropServices;

namespace System.EnterpriseServices
{
	/// <summary>Used by the .NET Framework infrastructure to install and configure assemblies in the COM+ catalog while maintaining a newly established transaction.</summary>
	// Token: 0x0200003E RID: 62
	[Transaction(TransactionOption.RequiresNew)]
	[Guid("C89AC250-E18A-4FC7-ABD5-B8897B6A78A5")]
	public sealed class RegistrationHelperTx : ServicedComponent
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationHelperTx" /> class.</summary>
		// Token: 0x060000D1 RID: 209 RVA: 0x0000252B File Offset: 0x0000072B
		[MonoTODO]
		public RegistrationHelperTx()
		{
		}

		// Token: 0x060000D2 RID: 210 RVA: 0x00002085 File Offset: 0x00000285
		[MonoTODO]
		protected internal override void Activate()
		{
			throw new NotImplementedException();
		}

		// Token: 0x060000D3 RID: 211 RVA: 0x00002085 File Offset: 0x00000285
		[MonoTODO]
		protected internal override void Deactivate()
		{
			throw new NotImplementedException();
		}

		/// <summary>Installs the named assembly in the COM+ catalog using transactional semantics.</summary>
		/// <param name="assembly">The file name of the assembly to install.</param>
		/// <param name="application">Either the name of the COM+ application to install into or <see langword="null" />.</param>
		/// <param name="tlb">Either the name of the output Type Library Exporter (Tlbexp.exe) file or <see langword="null" />.</param>
		/// <param name="installFlags">A bitwise combination of the installation flags values.</param>
		/// <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been configured in the COM+ catalog.</param>
		// Token: 0x060000D4 RID: 212 RVA: 0x00002533 File Offset: 0x00000733
		public void InstallAssembly(string assembly, ref string application, ref string tlb, InstallationFlags installFlags, object sync)
		{
			this.InstallAssembly(assembly, ref application, null, ref tlb, installFlags, sync);
		}

		/// <summary>Installs the named assembly in the COM+ catalog using transactional semantics.</summary>
		/// <param name="assembly">The file name of the assembly to install.</param>
		/// <param name="application">Either the name of the COM+ application to install into or a string that contains <see langword="null" />.</param>
		/// <param name="partition">Either the name of the partition or <see langword="null" />.</param>
		/// <param name="tlb">Either the name of the output Type Library Exporter (Tlbexp.exe) file or <see langword="null" />.</param>
		/// <param name="installFlags">A bitwise combination of the installation flags values.</param>
		/// <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been configured in the COM+ catalog.</param>
		// Token: 0x060000D5 RID: 213 RVA: 0x00002085 File Offset: 0x00000285
		[MonoTODO]
		public void InstallAssembly(string assembly, ref string application, string partition, ref string tlb, InstallationFlags installFlags, object sync)
		{
			throw new NotImplementedException();
		}

		/// <summary>Installs a specified assembly in the COM+ catalog using transactional semantics.</summary>
		/// <param name="regConfig">Configuration information for installing an assembly into the COM+ catalog.</param>
		/// <param name="sync">A synchronization object generated by the infrastructure that waits until the specified assembly has been configured in the COM+ catalog.</param>
		// Token: 0x060000D6 RID: 214 RVA: 0x00002085 File Offset: 0x00000285
		[MonoTODO]
		public void InstallAssemblyFromConfig([MarshalAs(UnmanagedType.IUnknown)] ref RegistrationConfig regConfig, object sync)
		{
			throw new NotImplementedException();
		}

		/// <summary>Gets a value indicating whether the current context for the <see cref="T:System.EnterpriseServices.RegistrationHelperTx" /> class instance is transactional.</summary>
		/// <returns>
		///   <see langword="true" /> if the current context for the <see cref="T:System.EnterpriseServices.RegistrationHelperTx" /> class instance is transactional; otherwise, <see langword="false" />.</returns>
		// Token: 0x060000D7 RID: 215 RVA: 0x00002085 File Offset: 0x00000285
		[MonoTODO]
		public bool IsInTransaction()
		{
			throw new NotImplementedException();
		}

		/// <summary>Uninstalls an assembly from a COM+ application using transactional semantics.</summary>
		/// <param name="assembly">The file name of the assembly to uninstall.</param>
		/// <param name="application">Either the name of the COM+ application that contains the components in the assembly or <see langword="null" />.</param>
		/// <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been uninstalled.</param>
		// Token: 0x060000D8 RID: 216 RVA: 0x00002543 File Offset: 0x00000743
		public void UninstallAssembly(string assembly, string application, object sync)
		{
			this.UninstallAssembly(assembly, application, null, sync);
		}

		/// <summary>Uninstalls an assembly from a COM+ application using transactional semantics.</summary>
		/// <param name="assembly">The file name of the assembly to uninstall.</param>
		/// <param name="application">Either the name of the COM+ application that contains the components in the assembly or <see langword="null" />.</param>
		/// <param name="partition">Either the name of the partition or <see langword="null" />.</param>
		/// <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been uninstalled.</param>
		// Token: 0x060000D9 RID: 217 RVA: 0x00002085 File Offset: 0x00000285
		[MonoTODO]
		public void UninstallAssembly(string assembly, string application, string partition, object sync)
		{
			throw new NotImplementedException();
		}

		/// <summary>Uninstalls a specified assembly from a COM+ application using transactional semantics.</summary>
		/// <param name="regConfig">Configuration information that specifies an assembly to uninstall from an application.</param>
		/// <param name="sync">A synchronization object generated by the infrastructure that waits until the specified assembly has been uninstalled.</param>
		// Token: 0x060000DA RID: 218 RVA: 0x00002085 File Offset: 0x00000285
		[MonoTODO]
		public void UninstallAssemblyFromConfig([MarshalAs(UnmanagedType.IUnknown)] ref RegistrationConfig regConfig, object sync)
		{
			throw new NotImplementedException();
		}
	}
}
