using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using Mono.CompilerServices.SymbolWriter;

namespace Mono.CSharp
{
	// Token: 0x02000241 RID: 577
	public class SourceFile : IEquatable<SourceFile>
	{
		// Token: 0x17000685 RID: 1669
		// (get) Token: 0x06001CA3 RID: 7331 RVA: 0x0008A988 File Offset: 0x00088B88
		// (set) Token: 0x06001CA4 RID: 7332 RVA: 0x0008A990 File Offset: 0x00088B90
		public string FullPathName
		{
			[CompilerGenerated]
			get
			{
				return this.<FullPathName>k__BackingField;
			}
			[CompilerGenerated]
			set
			{
				this.<FullPathName>k__BackingField = value;
			}
		}

		// Token: 0x06001CA5 RID: 7333 RVA: 0x0008A999 File Offset: 0x00088B99
		public SourceFile(string name, string path, int index, Func<Stream> streamIfDynamicFile = null)
		{
			this.Index = index;
			this.Name = name;
			this.FullPathName = path;
			this.getStreamIfDynamicFile = streamIfDynamicFile;
		}

		// Token: 0x06001CA6 RID: 7334 RVA: 0x0008A9BE File Offset: 0x00088BBE
		public Stream GetDataStream()
		{
			if (this.getStreamIfDynamicFile == null)
			{
				return File.OpenRead(this.Name);
			}
			return this.getStreamIfDynamicFile();
		}

		// Token: 0x17000686 RID: 1670
		// (get) Token: 0x06001CA7 RID: 7335 RVA: 0x0008A9DF File Offset: 0x00088BDF
		public byte[] Checksum
		{
			get
			{
				return this.checksum;
			}
		}

		// Token: 0x17000687 RID: 1671
		// (get) Token: 0x06001CA8 RID: 7336 RVA: 0x0008A9E7 File Offset: 0x00088BE7
		public bool HasChecksum
		{
			get
			{
				return this.checksum != null;
			}
		}

		// Token: 0x17000688 RID: 1672
		// (get) Token: 0x06001CA9 RID: 7337 RVA: 0x0008A9F2 File Offset: 0x00088BF2
		public SourceFileEntry SourceFileEntry
		{
			get
			{
				return this.file;
			}
		}

		// Token: 0x06001CAA RID: 7338 RVA: 0x0008A9FA File Offset: 0x00088BFA
		public void SetChecksum(byte[] checksum)
		{
			this.SetChecksum(SourceFile.MD5Algorith, checksum);
		}

		// Token: 0x06001CAB RID: 7339 RVA: 0x0008AA08 File Offset: 0x00088C08
		public void SetChecksum(byte[] algorithmGuid, byte[] checksum)
		{
			this.algGuid = algorithmGuid;
			this.checksum = checksum;
		}

		// Token: 0x06001CAC RID: 7340 RVA: 0x0008AA18 File Offset: 0x00088C18
		public SourceFileEntry CreateSymbolInfo(MonoSymbolFile symwriter)
		{
			if (this.hidden_lines != null)
			{
				this.hidden_lines.Sort();
			}
			this.file = new SourceFileEntry(symwriter, this.FullPathName, this.algGuid, this.checksum);
			if (this.AutoGenerated)
			{
				this.file.SetAutoGenerated();
			}
			return this.file;
		}

		// Token: 0x06001CAD RID: 7341 RVA: 0x0008AA6F File Offset: 0x00088C6F
		public bool Equals(SourceFile other)
		{
			return this.FullPathName == other.FullPathName;
		}

		// Token: 0x06001CAE RID: 7342 RVA: 0x0008AA84 File Offset: 0x00088C84
		public bool IsHiddenLocation(Location loc)
		{
			if (this.hidden_lines == null)
			{
				return false;
			}
			List<SourceFile.LocationRegion> list = this.hidden_lines;
			Location location = loc;
			int num = list.BinarySearch(new SourceFile.LocationRegion(location, location));
			num = ~num;
			if (num > 0)
			{
				SourceFile.LocationRegion locationRegion = this.hidden_lines[num - 1];
				if (loc.Row < locationRegion.End.Row)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06001CAF RID: 7343 RVA: 0x0008AADE File Offset: 0x00088CDE
		public void RegisterHiddenScope(Location start, Location end)
		{
			if (this.hidden_lines == null)
			{
				this.hidden_lines = new List<SourceFile.LocationRegion>();
			}
			this.hidden_lines.Add(new SourceFile.LocationRegion(start, end));
		}

		// Token: 0x06001CB0 RID: 7344 RVA: 0x0008AB05 File Offset: 0x00088D05
		public override string ToString()
		{
			return string.Format("SourceFile ({0}:{1}:{2})", this.Name, this.FullPathName, this.Index);
		}

		// Token: 0x06001CB1 RID: 7345 RVA: 0x0008AB28 File Offset: 0x00088D28
		// Note: this type is marked as 'beforefieldinit'.
		static SourceFile()
		{
		}

		// Token: 0x04000A88 RID: 2696
		private static readonly byte[] MD5Algorith = new byte[]
		{
			96,
			166,
			110,
			64,
			207,
			100,
			130,
			76,
			182,
			240,
			66,
			212,
			129,
			114,
			167,
			153
		};

		// Token: 0x04000A89 RID: 2697
		public readonly string Name;

		// Token: 0x04000A8A RID: 2698
		[CompilerGenerated]
		private string <FullPathName>k__BackingField;

		// Token: 0x04000A8B RID: 2699
		public readonly int Index;

		// Token: 0x04000A8C RID: 2700
		public bool AutoGenerated;

		// Token: 0x04000A8D RID: 2701
		private SourceFileEntry file;

		// Token: 0x04000A8E RID: 2702
		private byte[] algGuid;

		// Token: 0x04000A8F RID: 2703
		private byte[] checksum;

		// Token: 0x04000A90 RID: 2704
		private List<SourceFile.LocationRegion> hidden_lines;

		// Token: 0x04000A91 RID: 2705
		private Func<Stream> getStreamIfDynamicFile;

		// Token: 0x020003CD RID: 973
		private struct LocationRegion : IComparable<SourceFile.LocationRegion>
		{
			// Token: 0x06002767 RID: 10087 RVA: 0x000BC1E0 File Offset: 0x000BA3E0
			public LocationRegion(Location start, Location end)
			{
				this.Start = start;
				this.End = end;
			}

			// Token: 0x06002768 RID: 10088 RVA: 0x000BC1F0 File Offset: 0x000BA3F0
			public int CompareTo(SourceFile.LocationRegion other)
			{
				if (this.Start.Row == other.Start.Row)
				{
					return this.Start.Column.CompareTo(other.Start.Column);
				}
				return this.Start.Row.CompareTo(other.Start.Row);
			}

			// Token: 0x06002769 RID: 10089 RVA: 0x000BC264 File Offset: 0x000BA464
			public override string ToString()
			{
				return this.Start.ToString() + " - " + this.End.ToString();
			}

			// Token: 0x040010C5 RID: 4293
			public readonly Location Start;

			// Token: 0x040010C6 RID: 4294
			public readonly Location End;
		}
	}
}
