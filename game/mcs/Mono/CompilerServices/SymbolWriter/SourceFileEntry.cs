using System;
using System.IO;
using System.Security.Cryptography;

namespace Mono.CompilerServices.SymbolWriter
{
	// Token: 0x0200031B RID: 795
	public class SourceFileEntry
	{
		// Token: 0x17000871 RID: 2161
		// (get) Token: 0x06002528 RID: 9512 RVA: 0x00008E8B File Offset: 0x0000708B
		public static int Size
		{
			get
			{
				return 8;
			}
		}

		// Token: 0x06002529 RID: 9513 RVA: 0x000B1721 File Offset: 0x000AF921
		public SourceFileEntry(MonoSymbolFile file, string file_name)
		{
			this.file = file;
			this.file_name = file_name;
			this.Index = file.AddSource(this);
			this.creating = true;
		}

		// Token: 0x0600252A RID: 9514 RVA: 0x000B174B File Offset: 0x000AF94B
		public SourceFileEntry(MonoSymbolFile file, string file_name, byte[] guid, byte[] checksum) : this(file, file_name)
		{
			this.guid = guid;
			this.hash = checksum;
		}

		// Token: 0x17000872 RID: 2162
		// (get) Token: 0x0600252B RID: 9515 RVA: 0x000B1764 File Offset: 0x000AF964
		public byte[] Checksum
		{
			get
			{
				return this.hash;
			}
		}

		// Token: 0x0600252C RID: 9516 RVA: 0x000B176C File Offset: 0x000AF96C
		internal void WriteData(MyBinaryWriter bw)
		{
			this.DataOffset = (int)bw.BaseStream.Position;
			bw.Write(this.file_name);
			if (this.guid == null)
			{
				this.guid = new byte[16];
			}
			if (this.hash == null)
			{
				try
				{
					using (FileStream fileStream = new FileStream(this.file_name, FileMode.Open, FileAccess.Read))
					{
						MD5 md = MD5.Create();
						this.hash = md.ComputeHash(fileStream);
					}
				}
				catch
				{
					this.hash = new byte[16];
				}
			}
			bw.Write(this.guid);
			bw.Write(this.hash);
			bw.Write(this.auto_generated ? 1 : 0);
		}

		// Token: 0x0600252D RID: 9517 RVA: 0x000B183C File Offset: 0x000AFA3C
		internal void Write(BinaryWriter bw)
		{
			bw.Write(this.Index);
			bw.Write(this.DataOffset);
		}

		// Token: 0x0600252E RID: 9518 RVA: 0x000B1858 File Offset: 0x000AFA58
		internal SourceFileEntry(MonoSymbolFile file, MyBinaryReader reader)
		{
			this.file = file;
			this.Index = reader.ReadInt32();
			this.DataOffset = reader.ReadInt32();
			int num = (int)reader.BaseStream.Position;
			reader.BaseStream.Position = (long)this.DataOffset;
			this.file_name = reader.ReadString();
			this.guid = reader.ReadBytes(16);
			this.hash = reader.ReadBytes(16);
			this.auto_generated = (reader.ReadByte() == 1);
			reader.BaseStream.Position = (long)num;
		}

		// Token: 0x17000873 RID: 2163
		// (get) Token: 0x0600252F RID: 9519 RVA: 0x000B18ED File Offset: 0x000AFAED
		// (set) Token: 0x06002530 RID: 9520 RVA: 0x000B18F5 File Offset: 0x000AFAF5
		public string FileName
		{
			get
			{
				return this.file_name;
			}
			set
			{
				this.file_name = value;
			}
		}

		// Token: 0x17000874 RID: 2164
		// (get) Token: 0x06002531 RID: 9521 RVA: 0x000B18FE File Offset: 0x000AFAFE
		public bool AutoGenerated
		{
			get
			{
				return this.auto_generated;
			}
		}

		// Token: 0x06002532 RID: 9522 RVA: 0x000B1906 File Offset: 0x000AFB06
		public void SetAutoGenerated()
		{
			if (!this.creating)
			{
				throw new InvalidOperationException();
			}
			this.auto_generated = true;
			this.file.OffsetTable.FileFlags |= OffsetTable.Flags.IsAspxSource;
		}

		// Token: 0x06002533 RID: 9523 RVA: 0x000B1938 File Offset: 0x000AFB38
		public bool CheckChecksum()
		{
			bool result;
			try
			{
				using (FileStream fileStream = new FileStream(this.file_name, FileMode.Open))
				{
					byte[] array = MD5.Create().ComputeHash(fileStream);
					for (int i = 0; i < 16; i++)
					{
						if (array[i] != this.hash[i])
						{
							return false;
						}
					}
					result = true;
				}
			}
			catch
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06002534 RID: 9524 RVA: 0x000B19AC File Offset: 0x000AFBAC
		public override string ToString()
		{
			return string.Format("SourceFileEntry ({0}:{1})", this.Index, this.DataOffset);
		}

		// Token: 0x04000DED RID: 3565
		public readonly int Index;

		// Token: 0x04000DEE RID: 3566
		private int DataOffset;

		// Token: 0x04000DEF RID: 3567
		private MonoSymbolFile file;

		// Token: 0x04000DF0 RID: 3568
		private string file_name;

		// Token: 0x04000DF1 RID: 3569
		private byte[] guid;

		// Token: 0x04000DF2 RID: 3570
		private byte[] hash;

		// Token: 0x04000DF3 RID: 3571
		private bool creating;

		// Token: 0x04000DF4 RID: 3572
		private bool auto_generated;
	}
}
