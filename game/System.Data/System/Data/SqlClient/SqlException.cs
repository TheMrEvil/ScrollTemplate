using System;
using System.Collections;
using System.ComponentModel;
using System.Data.Common;
using System.Globalization;
using System.Runtime.Serialization;
using System.Security.Permissions;
using System.Text;
using Unity;

namespace System.Data.SqlClient
{
	/// <summary>The exception that is thrown when SQL Server returns a warning or error. This class cannot be inherited.</summary>
	// Token: 0x02000202 RID: 514
	[Serializable]
	public sealed class SqlException : DbException
	{
		// Token: 0x060018EB RID: 6379 RVA: 0x00073FE0 File Offset: 0x000721E0
		private SqlException(string message, SqlErrorCollection errorCollection, Exception innerException, Guid conId)
		{
			this._clientConnectionId = Guid.Empty;
			base..ctor(message, innerException);
			base.HResult = -2146232060;
			this._errors = errorCollection;
			this._clientConnectionId = conId;
		}

		// Token: 0x060018EC RID: 6380 RVA: 0x00074010 File Offset: 0x00072210
		private SqlException(SerializationInfo si, StreamingContext sc)
		{
			this._clientConnectionId = Guid.Empty;
			base..ctor(si, sc);
			base.HResult = -2146232060;
			foreach (SerializationEntry serializationEntry in si)
			{
				if ("ClientConnectionId" == serializationEntry.Name)
				{
					this._clientConnectionId = (Guid)serializationEntry.Value;
					return;
				}
			}
		}

		/// <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
		/// <param name="si">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
		/// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
		/// <exception cref="T:System.ArgumentNullException">The <paramref name="si" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
		// Token: 0x060018ED RID: 6381 RVA: 0x0007407C File Offset: 0x0007227C
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]
		public override void GetObjectData(SerializationInfo si, StreamingContext context)
		{
			base.GetObjectData(si, context);
			si.AddValue("Errors", null);
			si.AddValue("ClientConnectionId", this._clientConnectionId, typeof(Guid));
			for (int i = 0; i < this.Errors.Count; i++)
			{
				string key = "SqlError " + (i + 1).ToString();
				if (this.Data.Contains(key))
				{
					this.Data.Remove(key);
				}
				this.Data.Add(key, this.Errors[i].ToString());
			}
		}

		/// <summary>Gets a collection of one or more <see cref="T:System.Data.SqlClient.SqlError" /> objects that give detailed information about exceptions generated by the .NET Framework Data Provider for SQL Server.</summary>
		/// <returns>The collected instances of the <see cref="T:System.Data.SqlClient.SqlError" /> class.</returns>
		// Token: 0x1700047D RID: 1149
		// (get) Token: 0x060018EE RID: 6382 RVA: 0x00074120 File Offset: 0x00072320
		public SqlErrorCollection Errors
		{
			get
			{
				if (this._errors == null)
				{
					this._errors = new SqlErrorCollection();
				}
				return this._errors;
			}
		}

		/// <summary>Represents the client connection ID. For more information, see Data Tracing in ADO.NET.</summary>
		/// <returns>The client connection ID.</returns>
		// Token: 0x1700047E RID: 1150
		// (get) Token: 0x060018EF RID: 6383 RVA: 0x0007413B File Offset: 0x0007233B
		public Guid ClientConnectionId
		{
			get
			{
				return this._clientConnectionId;
			}
		}

		/// <summary>Gets the severity level of the error returned from the .NET Framework Data Provider for SQL Server.</summary>
		/// <returns>A value from 1 to 25 that indicates the severity level of the error.</returns>
		// Token: 0x1700047F RID: 1151
		// (get) Token: 0x060018F0 RID: 6384 RVA: 0x00074143 File Offset: 0x00072343
		public byte Class
		{
			get
			{
				if (this.Errors.Count <= 0)
				{
					return 0;
				}
				return this.Errors[0].Class;
			}
		}

		/// <summary>Gets the line number within the Transact-SQL command batch or stored procedure that generated the error.</summary>
		/// <returns>The line number within the Transact-SQL command batch or stored procedure that generated the error.</returns>
		// Token: 0x17000480 RID: 1152
		// (get) Token: 0x060018F1 RID: 6385 RVA: 0x00074166 File Offset: 0x00072366
		public int LineNumber
		{
			get
			{
				if (this.Errors.Count <= 0)
				{
					return 0;
				}
				return this.Errors[0].LineNumber;
			}
		}

		/// <summary>Gets a number that identifies the type of error.</summary>
		/// <returns>The number that identifies the type of error.</returns>
		// Token: 0x17000481 RID: 1153
		// (get) Token: 0x060018F2 RID: 6386 RVA: 0x00074189 File Offset: 0x00072389
		public int Number
		{
			get
			{
				if (this.Errors.Count <= 0)
				{
					return 0;
				}
				return this.Errors[0].Number;
			}
		}

		/// <summary>Gets the name of the stored procedure or remote procedure call (RPC) that generated the error.</summary>
		/// <returns>The name of the stored procedure or RPC.</returns>
		// Token: 0x17000482 RID: 1154
		// (get) Token: 0x060018F3 RID: 6387 RVA: 0x000741AC File Offset: 0x000723AC
		public string Procedure
		{
			get
			{
				if (this.Errors.Count <= 0)
				{
					return null;
				}
				return this.Errors[0].Procedure;
			}
		}

		/// <summary>Gets the name of the computer that is running an instance of SQL Server that generated the error.</summary>
		/// <returns>The name of the computer running an instance of SQL Server.</returns>
		// Token: 0x17000483 RID: 1155
		// (get) Token: 0x060018F4 RID: 6388 RVA: 0x000741CF File Offset: 0x000723CF
		public string Server
		{
			get
			{
				if (this.Errors.Count <= 0)
				{
					return null;
				}
				return this.Errors[0].Server;
			}
		}

		/// <summary>Gets a numeric error code from SQL Server that represents an error, warning or "no data found" message. For more information about how to decode these values, see Database Engine Events and Errors.</summary>
		/// <returns>The number representing the error code.</returns>
		// Token: 0x17000484 RID: 1156
		// (get) Token: 0x060018F5 RID: 6389 RVA: 0x000741F2 File Offset: 0x000723F2
		public byte State
		{
			get
			{
				if (this.Errors.Count <= 0)
				{
					return 0;
				}
				return this.Errors[0].State;
			}
		}

		/// <summary>Gets the name of the provider that generated the error.</summary>
		/// <returns>The name of the provider that generated the error.</returns>
		// Token: 0x17000485 RID: 1157
		// (get) Token: 0x060018F6 RID: 6390 RVA: 0x00074215 File Offset: 0x00072415
		public override string Source
		{
			get
			{
				if (this.Errors.Count <= 0)
				{
					return null;
				}
				return this.Errors[0].Source;
			}
		}

		/// <summary>Returns a string that represents the current <see cref="T:System.Data.SqlClient.SqlException" /> object, and includes the client connection ID (for more information, see <see cref="P:System.Data.SqlClient.SqlException.ClientConnectionId" />).</summary>
		/// <returns>A string that represents the current <see cref="T:System.Data.SqlClient.SqlException" /> object.<see cref="T:System.String" />.</returns>
		// Token: 0x060018F7 RID: 6391 RVA: 0x00074238 File Offset: 0x00072438
		public override string ToString()
		{
			StringBuilder stringBuilder = new StringBuilder(base.ToString());
			stringBuilder.AppendLine();
			stringBuilder.AppendFormat(SQLMessage.ExClientConnectionId(), this._clientConnectionId);
			if (this.Errors.Count > 0 && this.Number != 0)
			{
				stringBuilder.AppendLine();
				stringBuilder.AppendFormat(SQLMessage.ExErrorNumberStateClass(), this.Number, this.State, this.Class);
			}
			if (this.Data.Contains("OriginalClientConnectionId"))
			{
				stringBuilder.AppendLine();
				stringBuilder.AppendFormat(SQLMessage.ExOriginalClientConnectionId(), this.Data["OriginalClientConnectionId"]);
			}
			if (this.Data.Contains("RoutingDestination"))
			{
				stringBuilder.AppendLine();
				stringBuilder.AppendFormat(SQLMessage.ExRoutingDestination(), this.Data["RoutingDestination"]);
			}
			return stringBuilder.ToString();
		}

		// Token: 0x060018F8 RID: 6392 RVA: 0x00074329 File Offset: 0x00072529
		internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion)
		{
			return SqlException.CreateException(errorCollection, serverVersion, Guid.Empty, null);
		}

		// Token: 0x060018F9 RID: 6393 RVA: 0x00074338 File Offset: 0x00072538
		internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, SqlInternalConnectionTds internalConnection, Exception innerException = null)
		{
			Guid conId = (internalConnection == null) ? Guid.Empty : internalConnection._clientConnectionId;
			SqlException ex = SqlException.CreateException(errorCollection, serverVersion, conId, innerException);
			if (internalConnection != null)
			{
				if (internalConnection.OriginalClientConnectionId != Guid.Empty && internalConnection.OriginalClientConnectionId != internalConnection.ClientConnectionId)
				{
					ex.Data.Add("OriginalClientConnectionId", internalConnection.OriginalClientConnectionId);
				}
				if (!string.IsNullOrEmpty(internalConnection.RoutingDestination))
				{
					ex.Data.Add("RoutingDestination", internalConnection.RoutingDestination);
				}
			}
			return ex;
		}

		// Token: 0x060018FA RID: 6394 RVA: 0x000743C8 File Offset: 0x000725C8
		internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, Guid conId, Exception innerException = null)
		{
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i < errorCollection.Count; i++)
			{
				if (i > 0)
				{
					stringBuilder.Append(Environment.NewLine);
				}
				stringBuilder.Append(errorCollection[i].Message);
			}
			if (innerException == null && errorCollection[0].Win32ErrorCode != 0 && errorCollection[0].Win32ErrorCode != -1)
			{
				innerException = new Win32Exception(errorCollection[0].Win32ErrorCode);
			}
			SqlException ex = new SqlException(stringBuilder.ToString(), errorCollection, innerException, conId);
			ex.Data.Add("HelpLink.ProdName", "Microsoft SQL Server");
			if (!string.IsNullOrEmpty(serverVersion))
			{
				ex.Data.Add("HelpLink.ProdVer", serverVersion);
			}
			ex.Data.Add("HelpLink.EvtSrc", "MSSQLServer");
			ex.Data.Add("HelpLink.EvtID", errorCollection[0].Number.ToString(CultureInfo.InvariantCulture));
			ex.Data.Add("HelpLink.BaseHelpUrl", "http://go.microsoft.com/fwlink");
			ex.Data.Add("HelpLink.LinkId", "20476");
			return ex;
		}

		// Token: 0x060018FB RID: 6395 RVA: 0x000744E8 File Offset: 0x000726E8
		internal SqlException InternalClone()
		{
			SqlException ex = new SqlException(this.Message, this._errors, base.InnerException, this._clientConnectionId);
			if (this.Data != null)
			{
				foreach (object obj in this.Data)
				{
					DictionaryEntry dictionaryEntry = (DictionaryEntry)obj;
					ex.Data.Add(dictionaryEntry.Key, dictionaryEntry.Value);
				}
			}
			ex._doNotReconnect = this._doNotReconnect;
			return ex;
		}

		// Token: 0x17000486 RID: 1158
		// (get) Token: 0x060018FC RID: 6396 RVA: 0x00074588 File Offset: 0x00072788
		public override string Message
		{
			get
			{
				if (this.Errors.Count == 0)
				{
					return base.Message;
				}
				StringBuilder stringBuilder = new StringBuilder();
				if (base.Message != "SQL Exception has occured.")
				{
					stringBuilder.Append(base.Message);
					stringBuilder.Append("\n");
				}
				for (int i = 0; i < this.Errors.Count - 1; i++)
				{
					stringBuilder.Append(this.Errors[i].Message);
					stringBuilder.Append("\n");
				}
				stringBuilder.Append(this.Errors[this.Errors.Count - 1].Message);
				return stringBuilder.ToString();
			}
		}

		// Token: 0x060018FD RID: 6397 RVA: 0x000108A6 File Offset: 0x0000EAA6
		internal SqlException()
		{
			ThrowStub.ThrowNotSupportedException();
		}

		// Token: 0x04001037 RID: 4151
		private const string OriginalClientConnectionIdKey = "OriginalClientConnectionId";

		// Token: 0x04001038 RID: 4152
		private const string RoutingDestinationKey = "RoutingDestination";

		// Token: 0x04001039 RID: 4153
		private const int SqlExceptionHResult = -2146232060;

		// Token: 0x0400103A RID: 4154
		private SqlErrorCollection _errors;

		// Token: 0x0400103B RID: 4155
		private Guid _clientConnectionId;

		// Token: 0x0400103C RID: 4156
		internal bool _doNotReconnect;

		// Token: 0x0400103D RID: 4157
		private const string DEF_MESSAGE = "SQL Exception has occured.";
	}
}
