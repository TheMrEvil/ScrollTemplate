using System;
using System.Collections;
using System.Collections.Generic;

namespace System.Data.SqlClient
{
	/// <summary>Collects all errors generated by the .NET Framework Data Provider for SQL Server. This class cannot be inherited.</summary>
	// Token: 0x02000201 RID: 513
	[Serializable]
	public sealed class SqlErrorCollection : ICollection, IEnumerable
	{
		// Token: 0x060018E2 RID: 6370 RVA: 0x00073F5F File Offset: 0x0007215F
		internal SqlErrorCollection()
		{
		}

		/// <summary>Copies the elements of the <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> collection into an <see cref="T:System.Array" />, starting at the specified index.</summary>
		/// <param name="array">The <see cref="T:System.Array" /> to copy elements into.</param>
		/// <param name="index">The index from which to start copying into the <paramref name="array" /> parameter.</param>
		/// <exception cref="T:System.ArgumentException">The sum of <paramref name="index" /> and the number of elements in the <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> collection is greater than the <see cref="P:System.Array.Length" /> of the <see cref="T:System.Array" />.</exception>
		/// <exception cref="T:System.ArgumentNullException">The <paramref name="array" /> is <see langword="null" />.</exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for <paramref name="array" />.</exception>
		// Token: 0x060018E3 RID: 6371 RVA: 0x00073F72 File Offset: 0x00072172
		public void CopyTo(Array array, int index)
		{
			((ICollection)this._errors).CopyTo(array, index);
		}

		/// <summary>Copies the elements of the <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> collection into a <see cref="T:System.Data.SqlClient.SqlErrorCollection" />, starting at the specified index.</summary>
		/// <param name="array">The <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> to copy the elements into.</param>
		/// <param name="index">The index from which to start copying into the <paramref name="array" /> parameter.</param>
		/// <exception cref="T:System.ArgumentException">The sum of <paramref name="index" /> and the number of elements in the <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> collection is greater than the length of the <see cref="T:System.Data.SqlClient.SqlErrorCollection" />.</exception>
		/// <exception cref="T:System.ArgumentNullException">The <paramref name="array" /> is <see langword="null" />.</exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for <paramref name="array" />.</exception>
		// Token: 0x060018E4 RID: 6372 RVA: 0x00073F84 File Offset: 0x00072184
		public void CopyTo(SqlError[] array, int index)
		{
			this._errors.CopyTo(array, index);
		}

		/// <summary>Gets the number of errors in the collection.</summary>
		/// <returns>The total number of errors in the collection.</returns>
		// Token: 0x17000479 RID: 1145
		// (get) Token: 0x060018E5 RID: 6373 RVA: 0x00073FA0 File Offset: 0x000721A0
		public int Count
		{
			get
			{
				return this._errors.Count;
			}
		}

		/// <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
		/// <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
		// Token: 0x1700047A RID: 1146
		// (get) Token: 0x060018E6 RID: 6374 RVA: 0x00005696 File Offset: 0x00003896
		object ICollection.SyncRoot
		{
			get
			{
				return this;
			}
		}

		/// <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
		/// <returns>
		///   <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</returns>
		// Token: 0x1700047B RID: 1147
		// (get) Token: 0x060018E7 RID: 6375 RVA: 0x00006D64 File Offset: 0x00004F64
		bool ICollection.IsSynchronized
		{
			get
			{
				return false;
			}
		}

		/// <summary>Gets the error at the specified index.</summary>
		/// <param name="index">The zero-based index of the error to retrieve.</param>
		/// <returns>A <see cref="T:System.Data.SqlClient.SqlError" /> that contains the error at the specified index.</returns>
		/// <exception cref="T:System.IndexOutOfRangeException">Index parameter is outside array bounds.</exception>
		// Token: 0x1700047C RID: 1148
		public SqlError this[int index]
		{
			get
			{
				return (SqlError)this._errors[index];
			}
		}

		/// <summary>Returns an enumerator that iterates through the <see cref="T:System.Data.SqlClient.SqlErrorCollection" />.</summary>
		/// <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Data.SqlClient.SqlErrorCollection" />.</returns>
		// Token: 0x060018E9 RID: 6377 RVA: 0x00073FC0 File Offset: 0x000721C0
		public IEnumerator GetEnumerator()
		{
			return this._errors.GetEnumerator();
		}

		// Token: 0x060018EA RID: 6378 RVA: 0x00073FD2 File Offset: 0x000721D2
		internal void Add(SqlError error)
		{
			this._errors.Add(error);
		}

		// Token: 0x04001036 RID: 4150
		private readonly List<object> _errors = new List<object>();
	}
}
