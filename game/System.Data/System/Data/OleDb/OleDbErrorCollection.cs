using System;
using System.Collections;
using System.Data.Common;

namespace System.Data.OleDb
{
	/// <summary>Collects all errors generated by the .NET Framework Data Provider for OLE DB. This class cannot be inherited.</summary>
	// Token: 0x02000165 RID: 357
	[MonoTODO("OleDb is not implemented.")]
	public sealed class OleDbErrorCollection : ICollection, IEnumerable
	{
		// Token: 0x0600135B RID: 4955 RVA: 0x00003D93 File Offset: 0x00001F93
		internal OleDbErrorCollection()
		{
		}

		/// <summary>Gets the number of errors in the collection.</summary>
		/// <returns>The total number of errors in the collection.</returns>
		// Token: 0x17000337 RID: 823
		// (get) Token: 0x0600135C RID: 4956 RVA: 0x0005ABF4 File Offset: 0x00058DF4
		public int Count
		{
			get
			{
				throw ADP.OleDb();
			}
		}

		/// <summary>Copies the elements of the <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> into an <see cref="T:System.Array" />, starting at the specified index within the <see cref="T:System.Array" />.</summary>
		/// <param name="array">The <see cref="T:System.Array" /> into which to copy the elements.</param>
		/// <param name="index">The starting index of the <paramref name="array" />.</param>
		/// <exception cref="T:System.ArgumentException">The sum of <paramref name="index" /> and the number of elements in the <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> is greater than the length of the <see cref="T:System.Array" />.</exception>
		/// <exception cref="T:System.ArgumentNullException">The <paramref name="array" /> is <see langword="null" />.</exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for <paramref name="array" />.</exception>
		// Token: 0x0600135D RID: 4957 RVA: 0x0005ABF4 File Offset: 0x00058DF4
		public void CopyTo(Array array, int index)
		{
			throw ADP.OleDb();
		}

		/// <summary>Copies all the elements of the current <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> to the specified <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> starting at the specified destination index.</summary>
		/// <param name="array">The <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> that is the destination of the elements copied from the current <see cref="T:System.Data.OleDb.OleDbErrorCollection" />.</param>
		/// <param name="index">A 32-bit integer that represents the index in the <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> at which copying starts.</param>
		// Token: 0x0600135E RID: 4958 RVA: 0x0005ABF4 File Offset: 0x00058DF4
		public void CopyTo(OleDbError[] array, int index)
		{
			throw ADP.OleDb();
		}

		/// <summary>Exposes the <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> method, which supports a simple iteration over a collection by a .NET Framework data provider.</summary>
		/// <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
		// Token: 0x0600135F RID: 4959 RVA: 0x0005ABF4 File Offset: 0x00058DF4
		public IEnumerator GetEnumerator()
		{
			throw ADP.OleDb();
		}

		/// <summary>Gets the error at the specified index.</summary>
		/// <param name="index">The zero-based index of the error to retrieve.</param>
		/// <returns>An <see cref="T:System.Data.OleDb.OleDbError" /> that contains the error at the specified index.</returns>
		// Token: 0x17000338 RID: 824
		public OleDbError this[int index]
		{
			get
			{
				throw ADP.OleDb();
			}
		}

		/// <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
		/// <returns>
		///   <see langword="true" /> if access to the collection is synchronized (thread safe); otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
		// Token: 0x17000339 RID: 825
		// (get) Token: 0x06001361 RID: 4961 RVA: 0x0005ABF4 File Offset: 0x00058DF4
		bool ICollection.IsSynchronized
		{
			get
			{
				throw ADP.OleDb();
			}
		}

		/// <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
		/// <returns>A <see cref="T:System.Object" /> that can be used to synchronize access to the collection.</returns>
		// Token: 0x1700033A RID: 826
		// (get) Token: 0x06001362 RID: 4962 RVA: 0x0005ABF4 File Offset: 0x00058DF4
		object ICollection.SyncRoot
		{
			get
			{
				throw ADP.OleDb();
			}
		}
	}
}
