using System;

namespace System.Data.Common
{
	/// <summary>Provides data for the <see langword="RowUpdated" /> event of a .NET Framework data provider.</summary>
	// Token: 0x020003A7 RID: 935
	public class RowUpdatedEventArgs : EventArgs
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> class.</summary>
		/// <param name="dataRow">The <see cref="T:System.Data.DataRow" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</param>
		/// <param name="command">The <see cref="T:System.Data.IDbCommand" /> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called.</param>
		/// <param name="statementType">The type of SQL statement executed.</param>
		/// <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</param>
		// Token: 0x06002D56 RID: 11606 RVA: 0x000C0AEA File Offset: 0x000BECEA
		public RowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
		{
			if (statementType > StatementType.Batch)
			{
				throw ADP.InvalidStatementType(statementType);
			}
			this._dataRow = dataRow;
			this._command = command;
			this._statementType = statementType;
			this._tableMapping = tableMapping;
		}

		/// <summary>Gets the <see cref="T:System.Data.IDbCommand" /> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called.</summary>
		/// <returns>The <see cref="T:System.Data.IDbCommand" /> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called.</returns>
		// Token: 0x170007B4 RID: 1972
		// (get) Token: 0x06002D57 RID: 11607 RVA: 0x000C0B1A File Offset: 0x000BED1A
		public IDbCommand Command
		{
			get
			{
				return this._command;
			}
		}

		/// <summary>Gets any errors generated by the .NET Framework data provider when the <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> was executed.</summary>
		/// <returns>The errors generated by the .NET Framework data provider when the <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> was executed.</returns>
		// Token: 0x170007B5 RID: 1973
		// (get) Token: 0x06002D58 RID: 11608 RVA: 0x000C0B22 File Offset: 0x000BED22
		// (set) Token: 0x06002D59 RID: 11609 RVA: 0x000C0B2A File Offset: 0x000BED2A
		public Exception Errors
		{
			get
			{
				return this._errors;
			}
			set
			{
				this._errors = value;
			}
		}

		/// <summary>Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</summary>
		/// <returns>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</returns>
		// Token: 0x170007B6 RID: 1974
		// (get) Token: 0x06002D5A RID: 11610 RVA: 0x000C0B33 File Offset: 0x000BED33
		public int RecordsAffected
		{
			get
			{
				return this._recordsAffected;
			}
		}

		/// <summary>Gets the <see cref="T:System.Data.DataRow" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</summary>
		/// <returns>The <see cref="T:System.Data.DataRow" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
		// Token: 0x170007B7 RID: 1975
		// (get) Token: 0x06002D5B RID: 11611 RVA: 0x000C0B3B File Offset: 0x000BED3B
		public DataRow Row
		{
			get
			{
				return this._dataRow;
			}
		}

		// Token: 0x170007B8 RID: 1976
		// (get) Token: 0x06002D5C RID: 11612 RVA: 0x000C0B43 File Offset: 0x000BED43
		internal DataRow[] Rows
		{
			get
			{
				return this._dataRows;
			}
		}

		/// <summary>Gets the number of rows processed in a batch of updated records.</summary>
		/// <returns>
		///   <see langword="int" /> that specifies the number of row processed.</returns>
		// Token: 0x170007B9 RID: 1977
		// (get) Token: 0x06002D5D RID: 11613 RVA: 0x000C0B4C File Offset: 0x000BED4C
		public int RowCount
		{
			get
			{
				DataRow[] dataRows = this._dataRows;
				if (dataRows != null)
				{
					return dataRows.Length;
				}
				if (this._dataRow == null)
				{
					return 0;
				}
				return 1;
			}
		}

		/// <summary>Gets the type of SQL statement executed.</summary>
		/// <returns>The type of SQL statement executed.</returns>
		// Token: 0x170007BA RID: 1978
		// (get) Token: 0x06002D5E RID: 11614 RVA: 0x000C0B72 File Offset: 0x000BED72
		public StatementType StatementType
		{
			get
			{
				return this._statementType;
			}
		}

		/// <summary>Gets the <see cref="T:System.Data.UpdateStatus" /> of the <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> property.</summary>
		/// <returns>One of the <see cref="T:System.Data.UpdateStatus" /> values. The default is <see langword="Continue" />.</returns>
		// Token: 0x170007BB RID: 1979
		// (get) Token: 0x06002D5F RID: 11615 RVA: 0x000C0B7A File Offset: 0x000BED7A
		// (set) Token: 0x06002D60 RID: 11616 RVA: 0x000C0B82 File Offset: 0x000BED82
		public UpdateStatus Status
		{
			get
			{
				return this._status;
			}
			set
			{
				if (value <= UpdateStatus.SkipAllRemainingRows)
				{
					this._status = value;
					return;
				}
				throw ADP.InvalidUpdateStatus(value);
			}
		}

		/// <summary>Gets the <see cref="T:System.Data.Common.DataTableMapping" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</summary>
		/// <returns>The <see cref="T:System.Data.Common.DataTableMapping" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
		// Token: 0x170007BC RID: 1980
		// (get) Token: 0x06002D61 RID: 11617 RVA: 0x000C0B96 File Offset: 0x000BED96
		public DataTableMapping TableMapping
		{
			get
			{
				return this._tableMapping;
			}
		}

		// Token: 0x06002D62 RID: 11618 RVA: 0x000C0B9E File Offset: 0x000BED9E
		internal void AdapterInit(DataRow[] dataRows)
		{
			this._statementType = StatementType.Batch;
			this._dataRows = dataRows;
			if (dataRows != null && 1 == dataRows.Length)
			{
				this._dataRow = dataRows[0];
			}
		}

		// Token: 0x06002D63 RID: 11619 RVA: 0x000C0BC0 File Offset: 0x000BEDC0
		internal void AdapterInit(int recordsAffected)
		{
			this._recordsAffected = recordsAffected;
		}

		/// <summary>Copies references to the modified rows into the provided array.</summary>
		/// <param name="array">The array of <see cref="T:System.Data.DataRow" /> to copy into.</param>
		// Token: 0x06002D64 RID: 11620 RVA: 0x000C0BC9 File Offset: 0x000BEDC9
		public void CopyToRows(DataRow[] array)
		{
			this.CopyToRows(array, 0);
		}

		/// <summary>Copies references to the modified rows into the provided array.</summary>
		/// <param name="array">The array of <see cref="T:System.Data.DataRow" /> to copy into.</param>
		/// <param name="arrayIndex">The index in the array to start copying into.</param>
		// Token: 0x06002D65 RID: 11621 RVA: 0x000C0BD4 File Offset: 0x000BEDD4
		public void CopyToRows(DataRow[] array, int arrayIndex)
		{
			DataRow[] dataRows = this._dataRows;
			if (dataRows != null)
			{
				dataRows.CopyTo(array, arrayIndex);
				return;
			}
			if (array == null)
			{
				throw ADP.ArgumentNull("array");
			}
			array[arrayIndex] = this.Row;
		}

		// Token: 0x04001B9C RID: 7068
		private IDbCommand _command;

		// Token: 0x04001B9D RID: 7069
		private StatementType _statementType;

		// Token: 0x04001B9E RID: 7070
		private DataTableMapping _tableMapping;

		// Token: 0x04001B9F RID: 7071
		private Exception _errors;

		// Token: 0x04001BA0 RID: 7072
		private DataRow _dataRow;

		// Token: 0x04001BA1 RID: 7073
		private DataRow[] _dataRows;

		// Token: 0x04001BA2 RID: 7074
		private UpdateStatus _status;

		// Token: 0x04001BA3 RID: 7075
		private int _recordsAffected;
	}
}
