using System;

namespace System.Data.Common
{
	/// <summary>Provides the data for the RowUpdating event of a .NET Framework data provider.</summary>
	// Token: 0x020003A8 RID: 936
	public class RowUpdatingEventArgs : EventArgs
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> class.</summary>
		/// <param name="dataRow">The <see cref="T:System.Data.DataRow" /> to <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</param>
		/// <param name="command">The <see cref="T:System.Data.IDbCommand" /> to execute when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called.</param>
		/// <param name="statementType">The type of SQL statement to execute.</param>
		/// <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping" /> to send through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</param>
		// Token: 0x06002D66 RID: 11622 RVA: 0x000C0C0C File Offset: 0x000BEE0C
		public RowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
		{
			ADP.CheckArgumentNull(dataRow, "dataRow");
			ADP.CheckArgumentNull(tableMapping, "tableMapping");
			if (statementType <= StatementType.Delete)
			{
				this._dataRow = dataRow;
				this._command = command;
				this._statementType = statementType;
				this._tableMapping = tableMapping;
				return;
			}
			if (statementType == StatementType.Batch)
			{
				throw ADP.NotSupportedStatementType(statementType, "RowUpdatingEventArgs");
			}
			throw ADP.InvalidStatementType(statementType);
		}

		/// <summary>Gets or sets the <see cref="T:System.Data.IDbCommand" /> object for an instance of this class.</summary>
		/// <returns>The <see cref="T:System.Data.IDbCommand" /> to execute during the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
		// Token: 0x170007BD RID: 1981
		// (get) Token: 0x06002D67 RID: 11623 RVA: 0x000C0C6E File Offset: 0x000BEE6E
		// (set) Token: 0x06002D68 RID: 11624 RVA: 0x000C0C76 File Offset: 0x000BEE76
		protected virtual IDbCommand BaseCommand
		{
			get
			{
				return this._command;
			}
			set
			{
				this._command = value;
			}
		}

		/// <summary>Gets the <see cref="T:System.Data.IDbCommand" /> to execute during the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> operation.</summary>
		/// <returns>The <see cref="T:System.Data.IDbCommand" /> to execute during the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
		// Token: 0x170007BE RID: 1982
		// (get) Token: 0x06002D69 RID: 11625 RVA: 0x000C0C7F File Offset: 0x000BEE7F
		// (set) Token: 0x06002D6A RID: 11626 RVA: 0x000C0C87 File Offset: 0x000BEE87
		public IDbCommand Command
		{
			get
			{
				return this.BaseCommand;
			}
			set
			{
				this.BaseCommand = value;
			}
		}

		/// <summary>Gets any errors generated by the .NET Framework data provider when the <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> executes.</summary>
		/// <returns>The errors generated by the .NET Framework data provider when the <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> executes.</returns>
		// Token: 0x170007BF RID: 1983
		// (get) Token: 0x06002D6B RID: 11627 RVA: 0x000C0C90 File Offset: 0x000BEE90
		// (set) Token: 0x06002D6C RID: 11628 RVA: 0x000C0C98 File Offset: 0x000BEE98
		public Exception Errors
		{
			get
			{
				return this._errors;
			}
			set
			{
				this._errors = value;
			}
		}

		/// <summary>Gets the <see cref="T:System.Data.DataRow" /> that will be sent to the server as part of an insert, update, or delete operation.</summary>
		/// <returns>The <see cref="T:System.Data.DataRow" /> to send through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
		// Token: 0x170007C0 RID: 1984
		// (get) Token: 0x06002D6D RID: 11629 RVA: 0x000C0CA1 File Offset: 0x000BEEA1
		public DataRow Row
		{
			get
			{
				return this._dataRow;
			}
		}

		/// <summary>Gets the type of SQL statement to execute.</summary>
		/// <returns>The type of SQL statement to execute.</returns>
		// Token: 0x170007C1 RID: 1985
		// (get) Token: 0x06002D6E RID: 11630 RVA: 0x000C0CA9 File Offset: 0x000BEEA9
		public StatementType StatementType
		{
			get
			{
				return this._statementType;
			}
		}

		/// <summary>Gets or sets the <see cref="T:System.Data.UpdateStatus" /> of the <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> property.</summary>
		/// <returns>One of the <see cref="T:System.Data.UpdateStatus" /> values. The default is <see langword="Continue" />.</returns>
		// Token: 0x170007C2 RID: 1986
		// (get) Token: 0x06002D6F RID: 11631 RVA: 0x000C0CB1 File Offset: 0x000BEEB1
		// (set) Token: 0x06002D70 RID: 11632 RVA: 0x000C0CB9 File Offset: 0x000BEEB9
		public UpdateStatus Status
		{
			get
			{
				return this._status;
			}
			set
			{
				if (value <= UpdateStatus.SkipAllRemainingRows)
				{
					this._status = value;
					return;
				}
				throw ADP.InvalidUpdateStatus(value);
			}
		}

		/// <summary>Gets the <see cref="T:System.Data.Common.DataTableMapping" /> to send through the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</summary>
		/// <returns>The <see cref="T:System.Data.Common.DataTableMapping" /> to send through the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
		// Token: 0x170007C3 RID: 1987
		// (get) Token: 0x06002D71 RID: 11633 RVA: 0x000C0CCD File Offset: 0x000BEECD
		public DataTableMapping TableMapping
		{
			get
			{
				return this._tableMapping;
			}
		}

		// Token: 0x04001BA4 RID: 7076
		private IDbCommand _command;

		// Token: 0x04001BA5 RID: 7077
		private StatementType _statementType;

		// Token: 0x04001BA6 RID: 7078
		private DataTableMapping _tableMapping;

		// Token: 0x04001BA7 RID: 7079
		private Exception _errors;

		// Token: 0x04001BA8 RID: 7080
		private DataRow _dataRow;

		// Token: 0x04001BA9 RID: 7081
		private UpdateStatus _status;
	}
}
