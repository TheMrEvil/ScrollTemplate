using System;
using System.Collections;
using System.Globalization;

namespace System.Xml.Serialization
{
	/// <summary>Maintains a group of names for related code entities or type mappings that are generated by the .NET Framework's XML serialization infrastructure.</summary>
	// Token: 0x02000273 RID: 627
	public class CodeIdentifiers
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> class. </summary>
		// Token: 0x060017CC RID: 6092 RVA: 0x0008BA1B File Offset: 0x00089C1B
		public CodeIdentifiers() : this(true)
		{
		}

		/// <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> class and determines whether code identifiers are case sensitive.</summary>
		/// <param name="caseSensitive">
		///       <see langword="true" /> if identifiers are case sensitive; otherwise, <see langword="false" />. </param>
		// Token: 0x060017CD RID: 6093 RVA: 0x0008BA24 File Offset: 0x00089C24
		public CodeIdentifiers(bool caseSensitive)
		{
			if (caseSensitive)
			{
				this.identifiers = new Hashtable();
				this.reservedIdentifiers = new Hashtable();
			}
			else
			{
				IEqualityComparer equalityComparer = new CaseInsensitiveKeyComparer();
				this.identifiers = new Hashtable(equalityComparer);
				this.reservedIdentifiers = new Hashtable(equalityComparer);
			}
			this.list = new ArrayList();
		}

		/// <summary>Removes all code entities or type mappings, including their names, from the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
		// Token: 0x060017CE RID: 6094 RVA: 0x0008BA7B File Offset: 0x00089C7B
		public void Clear()
		{
			this.identifiers.Clear();
			this.list.Clear();
		}

		/// <summary>Gets or sets a value that indicates whether the instance uses camel case. </summary>
		/// <returns>
		///     <see langword="true" /> to indicate that the instance uses camel case; <see langword="false" /> to indicate that the instance uses Pascal case.</returns>
		// Token: 0x17000451 RID: 1105
		// (get) Token: 0x060017CF RID: 6095 RVA: 0x0008BA93 File Offset: 0x00089C93
		// (set) Token: 0x060017D0 RID: 6096 RVA: 0x0008BA9B File Offset: 0x00089C9B
		public bool UseCamelCasing
		{
			get
			{
				return this.camelCase;
			}
			set
			{
				this.camelCase = value;
			}
		}

		/// <summary>Ensures that the input is of the correct case by modifying the name according to the value of the <see cref="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing" /> property. </summary>
		/// <param name="identifier">The name to possibly modify.</param>
		/// <returns>A string that is the same as the input identifier or has the first letter's case modified.</returns>
		// Token: 0x060017D1 RID: 6097 RVA: 0x0008BAA4 File Offset: 0x00089CA4
		public string MakeRightCase(string identifier)
		{
			if (this.camelCase)
			{
				return CodeIdentifier.MakeCamel(identifier);
			}
			return CodeIdentifier.MakePascal(identifier);
		}

		/// <summary>Determines whether the input name conflicts with another name within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope and, if it does, generates a modified string. </summary>
		/// <param name="identifier">The name to modify if it is not already unique.</param>
		/// <returns>The identifier parameter value or a modified string if there is a name collision.</returns>
		// Token: 0x060017D2 RID: 6098 RVA: 0x0008BABC File Offset: 0x00089CBC
		public string MakeUnique(string identifier)
		{
			if (this.IsInUse(identifier))
			{
				int num = 1;
				string text;
				for (;;)
				{
					text = identifier + num.ToString(CultureInfo.InvariantCulture);
					if (!this.IsInUse(text))
					{
						break;
					}
					num++;
				}
				identifier = text;
			}
			if (identifier.Length > 511)
			{
				return this.MakeUnique("Item");
			}
			return identifier;
		}

		/// <summary>Prevents a specified name from being used within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
		/// <param name="identifier">A name that will not be available within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" />instance's scope.</param>
		// Token: 0x060017D3 RID: 6099 RVA: 0x0008BB15 File Offset: 0x00089D15
		public void AddReserved(string identifier)
		{
			this.reservedIdentifiers.Add(identifier, identifier);
		}

		/// <summary>Removes the input name from the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's reserved names. </summary>
		/// <param name="identifier">A name that will be made available within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope.</param>
		// Token: 0x060017D4 RID: 6100 RVA: 0x0008BB24 File Offset: 0x00089D24
		public void RemoveReserved(string identifier)
		{
			this.reservedIdentifiers.Remove(identifier);
		}

		/// <summary>Adds a named code entity or type mapping to the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope, ensuring that the name is unique within the scope. </summary>
		/// <param name="identifier">A candidate name that is used to index the code entity.</param>
		/// <param name="value">The code entity or type mapping information.</param>
		/// <returns>The identifier parameter value or a modified string if there is a name collision.</returns>
		// Token: 0x060017D5 RID: 6101 RVA: 0x0008BB32 File Offset: 0x00089D32
		public string AddUnique(string identifier, object value)
		{
			identifier = this.MakeUnique(identifier);
			this.Add(identifier, value);
			return identifier;
		}

		/// <summary>Determines whether a specified name is already being used within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
		/// <param name="identifier">The name to check for use within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope.</param>
		/// <returns>
		///     <see langword="true" /> if the name is already in use; otherwise, <see langword="false" />.</returns>
		// Token: 0x060017D6 RID: 6102 RVA: 0x0008BB46 File Offset: 0x00089D46
		public bool IsInUse(string identifier)
		{
			return this.identifiers.Contains(identifier) || this.reservedIdentifiers.Contains(identifier);
		}

		/// <summary>Adds a named code entity or type mapping to the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
		/// <param name="identifier">A name that is used to index the code entity.</param>
		/// <param name="value">The code entity or type mapping information.</param>
		// Token: 0x060017D7 RID: 6103 RVA: 0x0008BB64 File Offset: 0x00089D64
		public void Add(string identifier, object value)
		{
			this.identifiers.Add(identifier, value);
			this.list.Add(value);
		}

		/// <summary>Removes from the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope the code entity or type mapping identified by the input name. </summary>
		/// <param name="identifier">The name of the code entity or type mapping information to remove.</param>
		// Token: 0x060017D8 RID: 6104 RVA: 0x0008BB80 File Offset: 0x00089D80
		public void Remove(string identifier)
		{
			this.list.Remove(this.identifiers[identifier]);
			this.identifiers.Remove(identifier);
		}

		/// <summary>Returns an array of the code entities or type mappings within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
		/// <param name="type">The type of all the code entities or type mappings for the instance.</param>
		/// <returns>An array of the code entities or type mappings that is stored by the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> object.</returns>
		// Token: 0x060017D9 RID: 6105 RVA: 0x0008BBA8 File Offset: 0x00089DA8
		public object ToArray(Type type)
		{
			Array array = Array.CreateInstance(type, this.list.Count);
			this.list.CopyTo(array, 0);
			return array;
		}

		// Token: 0x060017DA RID: 6106 RVA: 0x0008BBD8 File Offset: 0x00089DD8
		internal CodeIdentifiers Clone()
		{
			return new CodeIdentifiers
			{
				identifiers = (Hashtable)this.identifiers.Clone(),
				reservedIdentifiers = (Hashtable)this.reservedIdentifiers.Clone(),
				list = (ArrayList)this.list.Clone(),
				camelCase = this.camelCase
			};
		}

		// Token: 0x04001885 RID: 6277
		private Hashtable identifiers;

		// Token: 0x04001886 RID: 6278
		private Hashtable reservedIdentifiers;

		// Token: 0x04001887 RID: 6279
		private ArrayList list;

		// Token: 0x04001888 RID: 6280
		private bool camelCase;
	}
}
