using System;
using System.Xml.Schema;

namespace System.Xml.Serialization
{
	/// <summary>Indicates that a public field or property represents an XML element when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes or deserializes the object that contains it.</summary>
	// Token: 0x020002D0 RID: 720
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.ReturnValue, AllowMultiple = true)]
	public class XmlElementAttribute : Attribute
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class.</summary>
		// Token: 0x06001BDC RID: 7132 RVA: 0x0009E5D8 File Offset: 0x0009C7D8
		public XmlElementAttribute()
		{
		}

		/// <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and specifies the name of the XML element.</summary>
		/// <param name="elementName">The XML element name of the serialized member. </param>
		// Token: 0x06001BDD RID: 7133 RVA: 0x0009E5E7 File Offset: 0x0009C7E7
		public XmlElementAttribute(string elementName)
		{
			this.elementName = elementName;
		}

		/// <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and specifies a type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied. This type is used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when serializing or deserializing object that contains it.</summary>
		/// <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
		// Token: 0x06001BDE RID: 7134 RVA: 0x0009E5FD File Offset: 0x0009C7FD
		public XmlElementAttribute(Type type)
		{
			this.type = type;
		}

		/// <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> and specifies the name of the XML element and a derived type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied. This member type is used when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes the object that contains it.</summary>
		/// <param name="elementName">The XML element name of the serialized member. </param>
		/// <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
		// Token: 0x06001BDF RID: 7135 RVA: 0x0009E613 File Offset: 0x0009C813
		public XmlElementAttribute(string elementName, Type type)
		{
			this.elementName = elementName;
			this.type = type;
		}

		/// <summary>Gets or sets the object type used to represent the XML element.</summary>
		/// <returns>The <see cref="T:System.Type" /> of the member.</returns>
		// Token: 0x17000582 RID: 1410
		// (get) Token: 0x06001BE0 RID: 7136 RVA: 0x0009E630 File Offset: 0x0009C830
		// (set) Token: 0x06001BE1 RID: 7137 RVA: 0x0009E638 File Offset: 0x0009C838
		public Type Type
		{
			get
			{
				return this.type;
			}
			set
			{
				this.type = value;
			}
		}

		/// <summary>Gets or sets the name of the generated XML element.</summary>
		/// <returns>The name of the generated XML element. The default is the member identifier.</returns>
		// Token: 0x17000583 RID: 1411
		// (get) Token: 0x06001BE2 RID: 7138 RVA: 0x0009E641 File Offset: 0x0009C841
		// (set) Token: 0x06001BE3 RID: 7139 RVA: 0x0009E657 File Offset: 0x0009C857
		public string ElementName
		{
			get
			{
				if (this.elementName != null)
				{
					return this.elementName;
				}
				return string.Empty;
			}
			set
			{
				this.elementName = value;
			}
		}

		/// <summary>Gets or sets the namespace assigned to the XML element that results when the class is serialized.</summary>
		/// <returns>The namespace of the XML element.</returns>
		// Token: 0x17000584 RID: 1412
		// (get) Token: 0x06001BE4 RID: 7140 RVA: 0x0009E660 File Offset: 0x0009C860
		// (set) Token: 0x06001BE5 RID: 7141 RVA: 0x0009E668 File Offset: 0x0009C868
		public string Namespace
		{
			get
			{
				return this.ns;
			}
			set
			{
				this.ns = value;
			}
		}

		/// <summary>Gets or sets the XML Schema definition (XSD) data type of the XML element generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
		/// <returns>An XML Schema data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema Part 2: Datatypes".</returns>
		/// <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the.NET data type. </exception>
		// Token: 0x17000585 RID: 1413
		// (get) Token: 0x06001BE6 RID: 7142 RVA: 0x0009E671 File Offset: 0x0009C871
		// (set) Token: 0x06001BE7 RID: 7143 RVA: 0x0009E687 File Offset: 0x0009C887
		public string DataType
		{
			get
			{
				if (this.dataType != null)
				{
					return this.dataType;
				}
				return string.Empty;
			}
			set
			{
				this.dataType = value;
			}
		}

		/// <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member that is set to <see langword="null" /> as an empty tag with the <see langword="xsi:nil" /> attribute set to <see langword="true" />.</summary>
		/// <returns>
		///     <see langword="true" /> if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the <see langword="xsi:nil" /> attribute; otherwise, <see langword="false" />.</returns>
		// Token: 0x17000586 RID: 1414
		// (get) Token: 0x06001BE8 RID: 7144 RVA: 0x0009E690 File Offset: 0x0009C890
		// (set) Token: 0x06001BE9 RID: 7145 RVA: 0x0009E698 File Offset: 0x0009C898
		public bool IsNullable
		{
			get
			{
				return this.nullable;
			}
			set
			{
				this.nullable = value;
				this.nullableSpecified = true;
			}
		}

		// Token: 0x17000587 RID: 1415
		// (get) Token: 0x06001BEA RID: 7146 RVA: 0x0009E6A8 File Offset: 0x0009C8A8
		internal bool IsNullableSpecified
		{
			get
			{
				return this.nullableSpecified;
			}
		}

		/// <summary>Gets or sets a value that indicates whether the element is qualified.</summary>
		/// <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</returns>
		// Token: 0x17000588 RID: 1416
		// (get) Token: 0x06001BEB RID: 7147 RVA: 0x0009E6B0 File Offset: 0x0009C8B0
		// (set) Token: 0x06001BEC RID: 7148 RVA: 0x0009E6B8 File Offset: 0x0009C8B8
		public XmlSchemaForm Form
		{
			get
			{
				return this.form;
			}
			set
			{
				this.form = value;
			}
		}

		/// <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
		/// <returns>The order of the code generation.</returns>
		// Token: 0x17000589 RID: 1417
		// (get) Token: 0x06001BED RID: 7149 RVA: 0x0009E6C1 File Offset: 0x0009C8C1
		// (set) Token: 0x06001BEE RID: 7150 RVA: 0x0009E6C9 File Offset: 0x0009C8C9
		public int Order
		{
			get
			{
				return this.order;
			}
			set
			{
				if (value < 0)
				{
					throw new ArgumentException(Res.GetString("Negative values are prohibited."), "Order");
				}
				this.order = value;
			}
		}

		// Token: 0x040019EB RID: 6635
		private string elementName;

		// Token: 0x040019EC RID: 6636
		private Type type;

		// Token: 0x040019ED RID: 6637
		private string ns;

		// Token: 0x040019EE RID: 6638
		private string dataType;

		// Token: 0x040019EF RID: 6639
		private bool nullable;

		// Token: 0x040019F0 RID: 6640
		private bool nullableSpecified;

		// Token: 0x040019F1 RID: 6641
		private XmlSchemaForm form;

		// Token: 0x040019F2 RID: 6642
		private int order = -1;
	}
}
